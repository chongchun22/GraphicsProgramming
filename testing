#include <Windows.h>
#include <gl/GL.h>
#include <gl/GLU.h>
#include <math.h>

#define WINDOW_TITLE "Practical Exercise 3"

int qNo = 1;

float lSpeed = 0.1;
float amb[3] = { 1.0,1.0,1.0 };			// amb red light
float posA[3] = { 0.0,0.0,0.0 };		// amb light pos(0,0.8,0)above shape
float dif[3] = { 1.0,1.0,1.0 };			//green color diffuse light
float posD[3] = { 0.8,0.0,0.0 };		//dif light pos 0.8,0,0 bot side
float ambM[3] = { 0.0,0.0,1.0 };		//blue color amb mat
float difM[3] = { 0.0,0.0,1.0 };		//blue color dif material
float lRotate = 0.0f;
bool isLightOn = false;

int rX = 0, rY = 0, rZ = 0;
float rSpeed = 0.5;



LRESULT WINAPI WindowProcedure(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	switch (msg)
	{
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	case WM_KEYDOWN:
		if (wParam == VK_F1) qNo++;

		if (wParam == VK_ESCAPE)
			PostQuitMessage(0);
		if (wParam == VK_SPACE)
			isLightOn = !isLightOn;
		else if (wParam == 0x31)	//press key 1
			qNo++;

		//changing the x value
		if (wParam == 0x44)			 //go right
			posD[0] += lSpeed;
		if (wParam == 0x41)			// go left
			posD[0] -= lSpeed;
		//changing the y value
		if (wParam == 0x57)			 // move up
			posD[1] += lSpeed;
		if (wParam == 0x53)			 //move down
			posD[1] -= lSpeed;
		//changing the z value
		if (wParam == 0x45)			  //move far
			posD[2] += lSpeed;
		if (wParam == 0x51)			// move near
			posD[2] -= lSpeed; 
		if (wParam == VK_DOWN)		 //clockwise rotate
			lRotate += lSpeed;
		if (wParam == VK_UP)		//anti clockwise rotate
			lRotate -= lSpeed;
		if (wParam == 0x4f)			//draw sphere
			qNo = 1;
		if (wParam == 0x50)			//draw pyramid
			qNo = 2;
		//rotate pyramid
		if (wParam == 0x58) rX = abs(rX - 1);
		if (wParam == 0x59) rY = abs(rY - 1);
		if (wParam == 0x5A) rZ = abs(rZ - 1);
		break;

	default:
		break;
	
	}
	return DefWindowProc(hWnd, msg, wParam, lParam);
}
//--------------------------------------------------------------------

bool initPixelFormat(HDC hdc)
{
	PIXELFORMATDESCRIPTOR pfd;
	ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));

	pfd.cAlphaBits = 8;
	pfd.cColorBits = 32;
	pfd.cDepthBits = 24;
	pfd.cStencilBits = 0;

	pfd.dwFlags = PFD_DOUBLEBUFFER | PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW;

	pfd.iLayerType = PFD_MAIN_PLANE;
	pfd.iPixelType = PFD_TYPE_RGBA;
	pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
	pfd.nVersion = 1;

	// choose pixel format returns the number most similar pixel format available
	int n = ChoosePixelFormat(hdc, &pfd);

	// set pixel format returns whether it sucessfully set the pixel format
	if (SetPixelFormat(hdc, n, &pfd))
	{
		return true;
	}
	else
	{
		return false;
	}
}
//--------------------------------------------------------------------

void drawSphere(float r)
{
	//glRotatef(0.01, 1.0, 1.0, 1.0);
	GLUquadricObj* sphere = NULL;			//declare quadric obj pointer
	sphere = gluNewQuadric();				//create quadric obj
	gluQuadricDrawStyle(sphere, GLU_FILL);	//draw using line
	gluSphere(sphere, r, 30, 30);         //draw sphere
	gluDeleteQuadric(sphere);				//destroy obj
}
void drawPyramid(float size) {
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);

	glLineWidth(3);
	glRotatef(rX * (rSpeed), 1.0, 0.0, 0.0);
	glRotatef(rY * (rSpeed), 0.0, 1.0, 0.0);
	glRotatef(rZ * (rSpeed), 0.0, 0.0, 1.0);

	glBegin(GL_POLYGON);
	// Base of the pyramid
	glVertex3f(0.0, 0.0, 0.0); // Bottom point
	glVertex3f(size, 0.0, 0.0); // Bottom right
	glVertex3f(size, 0.0, size); // Top right
	glEnd;
	glBegin(GL_POLYGON);
	glVertex3f(0.0, 0.0, 0.0); // Bottom point
	glVertex3f(size, 0.0, size); // Top right
	glVertex3f(0.0, 0.0, size); // Top left
	glEnd;
	glBegin(GL_POLYGON);
	// Front face
	glVertex3f(0.0, 0.0, 0.0); // Bottom point
	glVertex3f(size, 0.0, 0.0); // Bottom right
	glVertex3f(size / 2, size, size / 2); // Apex
	glEnd;
	glBegin(GL_POLYGON);
	// Right face
	glVertex3f(size, 0.0, 0.0); // Bottom right
	glVertex3f(size, 0.0, size); // Top right
	glVertex3f(size / 2, size, size / 2); // Apex
	glEnd;
	glBegin(GL_POLYGON);
	// Back face
	glVertex3f(size, 0.0, size); // Top right
	glVertex3f(0.0, 0.0, size); // Top left
	glVertex3f(size / 2, size, size / 2); // Apex
	glEnd;
	glBegin(GL_POLYGON);
	// Left face
	glVertex3f(0.0, 0.0, size); // Top left
	glVertex3f(0.0, 0.0, 0.0); // Bottom point
	glVertex3f(size / 2, size, size / 2); // Apex
	
	glEnd();

}
void lighthing()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);

	glEnable(GL_LIGHTING);

	glLightfv(GL_LIGHT2, GL_DIFFUSE, dif);
	glLightfv(GL_LIGHT2, GL_POSITION, posD);
	if (isLightOn) {
		glEnable(GL_LIGHT2);
	}
	else
	{
		glDisable(GL_LIGHT2);
	}
	////light 0 red light ambient light at pos 0,0,0
	//glLightfv(GL_LIGHT0, GL_AMBIENT, amb);
	//glLightfv(GL_LIGHT0, GL_POSITION, posA);
	//glEnable(GL_LIGHT0);
	////light 1 green color diffuse light at pos 0.8,0,0
	//glLightfv(GL_LIGHT1, GL_DIFFUSE, dif);
	//glLightfv(GL_LIGHT1, GL_POSITION, posD);
	//glEnable(GL_LIGHT1);

	glRotatef(lRotate, 0.0, 0.0, 1.0);
	glColor3f(0.0, 0.0, 1.0);

	glMaterialfv(GL_FRONT, GL_DIFFUSE, ambM);   //blue color amb material
	//glMaterialfv(GL_FRONT, GL_DIFFUSE, difM);   //blue color dif material
	
}
void display()
{
	lighthing();
	switch (qNo) {
	case 1:
		drawSphere(0.5);
		break;
	case 2:
		drawPyramid(0.5);
		break;


	}
	
	

}
//--------------------------------------------------------------------

int WINAPI WinMain(HINSTANCE hInst, HINSTANCE, LPSTR, int nCmdShow)
{
	WNDCLASSEX wc;
	ZeroMemory(&wc, sizeof(WNDCLASSEX));

	wc.cbSize = sizeof(WNDCLASSEX);
	wc.hInstance = GetModuleHandle(NULL);
	wc.lpfnWndProc = WindowProcedure;
	wc.lpszClassName = WINDOW_TITLE;
	wc.style = CS_HREDRAW | CS_VREDRAW;

	if (!RegisterClassEx(&wc)) return false;

	HWND hWnd = CreateWindow(WINDOW_TITLE, WINDOW_TITLE, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, 800, 600,
		NULL, NULL, wc.hInstance, NULL);

	//--------------------------------
	//	Initialize window for OpenGL
	//--------------------------------

	HDC hdc = GetDC(hWnd);

	//	initialize pixel format for the window
	initPixelFormat(hdc);

	//	get an openGL context
	HGLRC hglrc = wglCreateContext(hdc);

	//	make context current
	if (!wglMakeCurrent(hdc, hglrc)) return false;

	//--------------------------------
	//	End initialization
	//--------------------------------

	ShowWindow(hWnd, nCmdShow);

	MSG msg;
	ZeroMemory(&msg, sizeof(msg));

	while (true)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if (msg.message == WM_QUIT) break;

			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}

		display();

		SwapBuffers(hdc);
	}

	UnregisterClass(WINDOW_TITLE, wc.hInstance);

	return true;
}

//--------------------------------------------------------------------
